function [file] = map_wgs2html(llh, file, opts)
% MAP_WGS2HTML Generate HTML file to visualize WGS-84 data in a map.
%   [FILE] = MAP_WGS2HTML(LLH, FILE, OPTS) generates a HTML file to display
%   WGS 84 positions as a track in a web-based map using OpenLayers.
%
%   Inputs:
%   LLH     (n, 3) or (n, 2) array of points in GEOD system (WGS 84 based)*
%   FILE    optional name of html file (default: 'wgs.html')
%   OPTS    optional struct for method options
%   .title  string for browser title (default: 'Track Overview')
%   .header html code of page header (default: ...)
%   .height map height as string with unit (default: '85%')
%   .footer html code of page footer (default: ...)
%   .css    additional css (default: -)
%   .tcolorin string for track color (default: '3385ff')*
%   .tcolorout string for track color (default: '005ce6')*
%   .topaci opacity of track polyline (default: 1)*
%   .twidthin width of inner track polyline (default: 7)*
%   .twidthout width of outer track polyline (default: 10)*
%   .beg_nm string for "mouse-over" hint at start marker (default: ...)*
%   .beg_pu html code for "click" pop-up at start marker (default: ...)*
%   .course_pu html code for "click" pop-up at polyline (default: undefined)*
%   .end_nm string for "mouse-over" hint at end marker (default: ...)*
%   .end_pu html code for "click" pop-up at end marker (default: ...)*
%
%   *       may also be a cell array of ... to allow for multiple tracks
%           If LLH is a cell array, related OPTS may be defined by single
%           values or cell arrays of same length as the LLH cell array
%
%   Outputs:
%   FILE    name of html file
%
%   Examples:
%   data = [48.786826,9.084312; 48.884134,9.183340]/180*pi;
%   map_wgs2html(data, 'demo.html');
%   web('demo.html', '-browser');
%   Generates 'demo.html' in the current directory with one track.
%
%   data{1} = [48.786826,9.084312; 48.884134,9.183340]/180*pi;
%   data{2} = [48.786894,9.082922; 48.785995,9.084947]/180*pi;
%   map_wgs2html(data, 'demo.html');
%   web('demo.html', '-browser');
%   Generates 'demo.html' with two tracks.
%
%   See also MAP_INTRO.

% *****************************************************************
% ASAM OpenCRG Matlab API
%
% OpenCRG version:           1.2.0
%
% package:               lib
% file name:             map_wgs2html.m
% author:                ASAM e.V.
%
%
% C by ASAM e.V., 2020
% Any use is limited to the scope described in the license terms.
% The license terms can be viewed at www.asam.net/license
%
% More Information on ASAM OpenCRG can be found here:
% https://www.asam.net/standards/detail/opencrg/
%
% *****************************************************************

%% process required arguments 

lc = iscell(llh);
if lc
    nc = length(llh);
    for ic = 1:nc
        if(~isempty(llh{ic}))
            wgs{ic} = llh{ic}(:,1:2)*180/pi; %#ok<AGROW>
        else
            wgs{ic} = {}; %#ok<AGROW>
        end
    end
else
    nc = 1;
    wgs{1} = llh(:,1:2)*180/pi;
end

%% handle optional arguments

% FILE

if nargin<2 || isempty(file)
    file = 'wgs.html';
end

% OPTS - single values only

if nargin<3 || isempty(opts)
    opts = struct;
end

if isfield(opts, 'title')
    title = opts.title;
else
    title = 'Track Overview Map';
end

if isfield(opts, 'header')
    header = opts.header;
else
    header = '<h1>Track Overview Map</h1>';
end

if isfield(opts, 'height')
    height = opts.height;
else
    height = '85%';
end

if isfield(opts, 'footer')
    footer = opts.footer;
else
    footer = ['<address>generated by ' mfilename ' at ' datestr(now, 31) '</address>'];
end

if isfield(opts, 'css')
    css = opts.css;
else
    css = '';
end

% OPTS - single value or cell array

if isfield(opts, 'tcolorin')
    if iscell(opts.tcolorin)
        tcolorin = opts.tcolorin;
    else
        for ic = 1:nc
            tcolorin{ic} = opts.tcolorin; %#ok<AGROW>
        end
    end
else
    scolor{1} = '0099e6'; % blue
    % other colors

    for ic = 1:nc
        tcolorin{ic} = '0099e6'; %#ok<AGROW>
    end
end

% OPTS - single value or cell array

if isfield(opts, 'tcolorout')
    if iscell(opts.tcolorout)
        tcolorout = opts.tcolorout;
    else
        for ic = 1:nc
            tcolorout{ic} = opts.tcolorout; %#ok<AGROW>
        end
    end
else
    scolor{1} = '006ea5'; % blue
    % other colors

    for ic = 1:nc
        tcolorout{ic} = '006ea5'; %#ok<AGROW>
    end
end

if isfield(opts, 'topaci')
    if iscell(opts.topaci)
        topaci = opts.topaci;
    else
        for ic = 1:nc
            topaci{ic} = opts.topaci; %#ok<AGROW>
        end
    end
else
    for ic = 1:nc
        topaci{ic} = 1; %#ok<AGROW>
    end
end

if isfield(opts, 'twidthin')
    if iscell(opts.twidthin)
        twidthin = opts.twidthin;
    else
        for ic = 1:nc
            twidthin{ic} = opts.twidthin; %#ok<AGROW>
        end
    end
else
    for ic = 1:nc
        twidthin{ic} = 7; %#ok<AGROW>
    end
end

if isfield(opts, 'twidthout')
    if iscell(opts.twidthout)
        twidthout = opts.twidthout;
    else
        for ic = 1:nc
            twidthout{ic} = opts.twidthout; %#ok<AGROW>
        end
    end
else
    for ic = 1:nc
        twidthout{ic} = 10; %#ok<AGROW>
    end
end

if isfield(opts, 'beg_nm')
    if iscell(opts.beg_nm)
        beg_nm = opts.beg_nm;
    else
        for ic = 1:nc
            beg_nm{ic} = opts.beg_nm; %#ok<AGROW>
        end
    end
else
    for ic = 1:nc
        if lc
            beg_nm{ic} = sprintf('Start %u', ic);  %#ok<AGROW>
        else
            beg_nm{ic} = 'Start';  %#ok<AGROW>
        end
    end
end

if isfield(opts, 'beg_pu')
    if iscell(opts.beg_pu)
        beg_pu = opts.beg_pu;
    else
        for ic = 1:nc
            beg_pu{ic} = opts.beg_pu; %#ok<AGROW>
        end
    end
else
    for ic = 1:nc
        if lc
            beg_pu{ic} = sprintf('<h4>Start of Track %u:</h4>', ic); %#ok<AGROW>
        else
            beg_pu{ic} = '<h4>Start of Track:</h4>'; %#ok<AGROW>
        end
        
        if(~isempty(wgs{ic}))
            beg_pu{ic} = [beg_pu{ic} '<table style=\"text-align:right\"><tbody>' ...
                '<tr><td>lat =</td><td>' num2str(wgs{ic}(1,1),'%.6f') '</td></tr>' ...
                '<tr><td>lon =</td><td>' num2str(wgs{ic}(1,2),'%.6f') '</td></tr>']; %#ok<AGROW>
            if size(wgs{ic}, 2) > 2
                beg_pu{ic} = [beg_pu{ic} '<tr><td>alt =</td><td>' num2str(wgs{ic}(1,3),'%.6f') '</td></tr>']; %#ok<AGROW>
            end
            beg_pu{ic} = [beg_pu{ic} '</tbody></table>']; %#ok<AGROW>
        else
            beg_pu{ic} = []; %#ok<AGROW>
        end
        
    end
end

if isfield(opts, 'course_pu')
    if iscell(opts.course_pu)
        course_pu = opts.course_pu;
    else
        for ic = 1:nc
            course_pu{ic} = opts.course_pu; %#ok<AGROW>
        end
    end
else
    for ic = 1:nc
            course_pu{ic} = 'undefined'; %#ok<AGROW>
    end
end


if isfield(opts, 'end_nm')
    if iscell(opts.end_nm)
        end_nm = opts.end_nm;
    else
        for ic = 1:nc
            end_nm{ic} = opts.end_nm; %#ok<AGROW>
        end
    end
else
    for ic = 1:nc
        if lc
            end_nm{ic} = sprintf('End %u', ic);  %#ok<AGROW>
        else
            end_nm{ic} = 'End';  %#ok<AGROW>
        end
    end
end

if isfield(opts, 'end_pu')
    if iscell(opts.end_pu)
        end_pu = opts.end_pu;
    else
        for ic = 1:nc
            end_pu{ic} = opts.end_pu; %#ok<AGROW>
        end
    end
else
    for ic = 1:nc
        if lc
            end_pu{ic} = sprintf('<h4>End of Track %u:</h4>', ic); %#ok<AGROW>
        else
            end_pu{ic} = '<h4>End of Track:</h4>'; %#ok<AGROW>
        end
        if(~isempty(wgs{ic}))
            end_pu{ic} = [end_pu{ic} '<table style=\"text-align:right\"><tbody>' ...
                '<tr><td>lat =</td><td>' num2str(wgs{ic}(end,1),'%.6f') '</td></tr>' ...
                '<tr><td>lon =</td><td>' num2str(wgs{ic}(end,2),'%.6f') '</td></tr>']; %#ok<AGROW>
            if size(wgs{ic}, 2) > 2
                end_pu{ic} = [end_pu{ic} '<tr><td>alt =</td><td>' num2str(wgs{ic}(1,3),'%.6f') '</td></tr>']; %#ok<AGROW>
            end

            end_pu{ic} = [end_pu{ic} '</tbody></table>']; %#ok<AGROW>

       else
            end_pu{ic} = []; %#ok<AGROW>
        end
    end
end

%% fill missing cells



%% write html file

fid = fopen(file, 'w');

fprintf(fid, '<!DOCTYPE html>\n');
fprintf(fid, '<html>\n');
fprintf(fid, '  <head>\n');
fprintf(fid, '    <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />\n');
fprintf(fid, '    <meta charset="ISO8859-1" />\n');
fprintf(fid, '    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.3.1/css/ol.css" type="text/css">\n');
fprintf(fid, '    <style type="text/css">\n');
fprintf(fid, '      html, body { height: 100%%; margin: 0; padding: 0; font-family:"AzoSans-Bold",Helvetica,Arial,sans-serif; overflow: auto; } \n');
fprintf(fid, '      h1 { font-size: 2rem; margin: 0.5rem; }\n');
fprintf(fid, '      h3 { font-size: 1.2rem; margin: 0.5rem; }\n');
fprintf(fid, '      .map { height: %s; min-height: 360px; width: 100%%; }\n', height);
fprintf(fid, '      .popup { background: white; padding: 1rem; border-radius: 1rem; box-shadow: 0 0 8px grey; }\n');
fprintf(fid, '      .popup h4 {margin: 0 2rem 0.7rem 0;}\n');
fprintf(fid, '      .popup:after {content: "";position: absolute;bottom: 0;left: 50%%;width: 0;height: 0;border: 0.688em solid transparent;border-top-color: white;border-bottom: 0;margin-left: -0.687em;margin-bottom: -0.687em;}\n');
fprintf(fid, '      .popup-closer {text-decoration: none;color: black;position: absolute;top: 0.5rem;right: 1rem;}\n');
fprintf(fid, '      .popup-closer:after {content: "\\2716";}\n');
fprintf(fid, '      .popup-closer:hover {color: #cd0000;cursor: pointer;}\n');
fprintf(fid, '      .featuretip {background-color: white;color: black;padding: 0.1rem 0.4rem;border-radius: 0.2rem;border: 1px solid black;}\n');
fprintf(fid, '      %s\n', css);
fprintf(fid, '    </style>\n');
fprintf(fid, '    <title>%s</title>\n', title);
fprintf(fid, '  </head>\n');
fprintf(fid, '  <body>\n');
fprintf(fid, '    %s\n', header);
fprintf(fid, '    <div id="crg-map" class="map">\n<div id="popup" class="popup"><div id="popup-content"></div><a href="#" id="popup-closer" class="popup-closer"></a></div>\n<div id="featuretip" class="featuretip"></div>\n</div>\n');
fprintf(fid, '    %s\n', footer);
fprintf(fid, '    <script type="text/javascript" src="https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.3.1/build/ol.js"></script>\n');
fprintf(fid, '    <script type="text/javascript">\n');
fprintf(fid, '      let popup = new ol.Overlay({\n');
fprintf(fid, '        element: document.getElementById("popup"),\n');
fprintf(fid, '        positioning: "bottom-center",\n');
fprintf(fid, '        stopEvent: true,\n');
fprintf(fid, '        offset: [0, -50]\n');
fprintf(fid, '      });\n');
fprintf(fid, '      let featuretip = new ol.Overlay({\n');
fprintf(fid, '        element: document.getElementById("featuretip"),\n');
fprintf(fid, '        positioning: "top-left",\n');
fprintf(fid, '        stopEvent: true,\n');
fprintf(fid, '        offset: [10, 0]\n');
fprintf(fid, '      });\n');
fprintf(fid, '      let createSVGIconStyle = function(letter) {\n');
fprintf(fid, '        let svg = `data:image/svg+xml;utf8,\n');
fprintf(fid, '        <svg width="28" height="37" version="1.1" viewBox="0 0 384 512" xmlns="http://www.w3.org/2000/svg">\n');
fprintf(fid, '        <path d="M172.268 501.67C26.97 291.031 0 269.413 0 192 0 85.961 85.961 0 192 0s192 85.961 192 192c0 77.413-26.97 99.031-172.268 309.67-9.535 13.774-29.93 13.773-39.464 0z" fill="currentColor"/>\n');
fprintf(fid, '        <text id="start-text" x="85" y="305.83084" style="font-size:300px;font-family:sans-serif;font-weight:bold;line-height:1.25;fill:white;">\n');
fprintf(fid, '        ${letter}</text></svg>`;\n');
fprintf(fid, '        return new ol.style.Style({\n');
fprintf(fid, '          image: new ol.style.Icon({anchor: [0.5, 1], src: svg})\n');
fprintf(fid, '        });\n');
fprintf(fid, '      }\n');
fprintf(fid, '      let vectorSource = new ol.source.Vector({});\n');

for ic = 1:nc
    
    if isempty(wgs{ic})
        continue;
    end
    

    fprintf(fid, '      let startPoint%u = new ol.Feature({\n', ic);
    fprintf(fid, '        geometry: new ol.geom.Point(ol.proj.fromLonLat([%.6f, %.6f])),\n', wgs{ic}(1,2), wgs{ic}(1,1));
    fprintf(fid, '        name: "%s",\n', beg_nm{ic});
    fprintf(fid, '        description: "%s"\n', beg_pu{ic});
    fprintf(fid, '      });\n');
    fprintf(fid, '      let endPoint%u = new ol.Feature({\n', ic);
    fprintf(fid, '        geometry: new ol.geom.Point(ol.proj.fromLonLat([%.6f, %.6f])),\n', wgs{ic}(end,2), wgs{ic}(end,1));
    fprintf(fid, '        name: "%s",\n', end_nm{ic});
    fprintf(fid, '        description: "%s"\n', end_pu{ic});
    fprintf(fid, '      });\n');
    fprintf(fid, '      let route%u = new ol.Feature({\n', ic);
    fprintf(fid, '        geometry: new ol.geom.LineString([\n');
    for i = 1:size(wgs{ic}, 1)
        fprintf(fid, '          ol.proj.fromLonLat([%.6f,%.6f]),\n', wgs{ic}(i,2), wgs{ic}(i,1));
    end
    fprintf(fid, '        ]),\n');
    fprintf(fid, '        description: "%s"\n', course_pu{ic});
    fprintf(fid, '      });\n');
    fprintf(fid, '      startPoint%u.setStyle(createSVGIconStyle("A"));\n', ic);
    fprintf(fid, '      endPoint%u.setStyle(createSVGIconStyle("B"));\n', ic);
    fprintf(fid, '      route%u.setStyle([\n', ic);
    fprintf(fid, '        new ol.style.Style({\n');
    fprintf(fid, '          stroke: new ol.style.Stroke({\n');
    fprintf(fid, '            width: %d,\n', twidthout{ic});
    fprintf(fid, '            color: "#%s"\n', tcolorout{ic});
    fprintf(fid, '          })\n');
    fprintf(fid, '        }),\n');
    fprintf(fid, '        new ol.style.Style({\n');
    fprintf(fid, '          stroke: new ol.style.Stroke({\n');
    fprintf(fid, '            width: %d,\n', twidthin{ic});
    fprintf(fid, '            color: "#%s"\n', tcolorin{ic});
    fprintf(fid, '          })\n');
    fprintf(fid, '      })]);\n');
    fprintf(fid, '      vectorSource.addFeatures([startPoint%u, endPoint%u, route%u]);\n', ic, ic, ic);
end
fprintf(fid, '      let extent = vectorSource.getExtent();\n');
fprintf(fid, '      let measures = [extent[2]-extent[0],extent[3]-extent[1]];\n');
fprintf(fid, '      let center = [extent[0]+(measures[0])/2,extent[1]+(measures[1])/2]\n');
fprintf(fid, '      let map = new ol.Map({\n');
fprintf(fid, '        target: "crg-map",\n');
fprintf(fid, '        layers: [\n');
fprintf(fid, '          new ol.layer.Tile({source: new ol.source.OSM()}),\n');
fprintf(fid, '          new ol.layer.Vector({source: vectorSource})\n');
fprintf(fid, '        ],\n');
fprintf(fid, '        view: new ol.View({center: center, zoom: 1}),\n');
fprintf(fid, '        overlays: [popup, featuretip]\n');
fprintf(fid, '      });\n');
fprintf(fid, '      let minResolution = Math.max(...map.getSize().map((px,i)=>measures[i]/px*1.7));\n');
fprintf(fid, '      map.getView().fit(extent, {duration: 3000, easing: ol.easing.easeOut, minResolution: minResolution} );\n');
fprintf(fid, '      map.on("pointermove", (event)=> {\n');
fprintf(fid, '        let feature = map.forEachFeatureAtPixel(event.pixel, (feature) => feature);\n');
fprintf(fid, '        if (feature && feature.get("name")) {\n');
fprintf(fid, '          document.getElementById("featuretip").innerHTML = feature.get("name");\n');
fprintf(fid, '          featuretip.setPosition(feature.getGeometry().getCoordinates());\n');
fprintf(fid, '        } else { featuretip.setPosition(undefined); }\n');
fprintf(fid, '        if (feature && feature.get("description")) {\n');
fprintf(fid, '          document.getElementById("crg-map").style.cursor = "pointer";\n');
fprintf(fid, '        } else { document.getElementById("crg-map").style.cursor = "auto"; }\n');
fprintf(fid, '      });\n');
fprintf(fid, '      map.on("singleclick", (event) => {\n');
fprintf(fid, '        let feature = map.forEachFeatureAtPixel(event.pixel, (feature) => feature);\n');
fprintf(fid, '        if (feature && feature.get("description")) {\n');
fprintf(fid, '          document.getElementById("popup-content").innerHTML = feature.get("description");\n');
fprintf(fid, '          if (feature.getGeometry().getType() === "Point"){\n');
fprintf(fid, '            popup.setOffset([0, -50]);\n');
fprintf(fid, '            popup.setPosition(feature.getGeometry().getCoordinates());\n');
fprintf(fid, '          } else if (feature.getGeometry().getType() === "LineString"){\n');
fprintf(fid, '            popup.setOffset([0, -20]);\n');
fprintf(fid, '            popup.setPosition(feature.getGeometry().getCoordinateAt(0.5));\n');
fprintf(fid, '          } else { popup.setPosition(undefined); }\n');
fprintf(fid, '        } else { popup.setPosition(undefined); }\n');
fprintf(fid, '      });\n');
fprintf(fid, '      document.getElementById("popup-closer").addEventListener("click", (event) =>{\n');
fprintf(fid, '        popup.setPosition(undefined);\n');
fprintf(fid, '        event.target.blur();\n');
fprintf(fid, '        event.preventDefault();\n');
fprintf(fid, '        return false;\n');
fprintf(fid, '      });\n');
fprintf(fid, '    </script>\n');
fprintf(fid, '  </body>\n');
fprintf(fid, '</html>\n');

fclose(fid);

end
